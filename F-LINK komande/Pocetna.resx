<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAAAABoBQAAJgAAACAgAAAAAAAAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAEAB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wBCPP8AY2FaAK2urQCMhv8AxsP/ADk4MQCMjowA1tPOABgc
        GABzaf8A3t//AHN1cwCtqv8ASklKACkk/wDv7+8ApZ6cAMbDxgAQEAgA3t/eACkkIQCcnv8AUkn/AL22
        tQB7efcA7+f/AGtpawDOz/8A9/f3AOfn5wB7fXsAOTT/AKWmpQBCRUIACAgIANbX/wBSUUoAtbL/AFpd
        WgCEffcASkH/AAgEAAAQFBAAISAhADk8OQDW19YAzs/OAHt9/wC1srUA9/f/AOfn/wBKSUIAc3H/AAAE
        AAAQEBAAGBgYAP/7/wD38/cAISQhAO/r/wDe294A1tPWALWu/wBzbf8Aa21rALW2tQBzcXMAe3l7AKWi
        nACloqUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBKQYBAQEBAQEBAQEfIBwBARoCQAEBAQEBAQEBFQoAAQEdKhAX
        AQEBAQEBAS8KAAEBARtBIQUBAQEBAQEwOCQBAQEBAScYQTMBAQEBMgA8AQEBAQEBNAs2NAEBASAABwEB
        AQEBAQEBQDElATojACgBAQEBAQEBAQEMDjQJOSsEAQEBAQEBAQEBATM9RAAuOwEBAQEBAQEBAQEBLwoA
        CAEBAQEBAQEBAQEBHjUAIxEBAQEBAQEBAQEBAQ03FhMBAQEBAQEBAQEBHg0kLCIBAQE7PjoBAQEeQw8A
        LSIBAQEBOxlGRUVCJhQsAz8BAQEBAQEBPkcgQg0SLwEBAQEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAIAAAA
        AACABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8AQjj/AJyenABSUUoAta7/AHt1/wAQCO8AKSgpANbX
        1gBzdXMAvba9AN7f/wBaWfcAlI73ACkg9wAYFBAA7+vnAEI8OQBjYWMAjIqMAMbD/wCtqq0ApZ73AO/v
        /wBrZf8AhIJ7AFJJ/wDGw8YA1s//AAgMCAAxLP8AIRwYADk0MQD39/cA3t/eAEpJQgDOz84AjIb/AGtp
        awCUlpQApaKlAL26/wBjWf8AnJ7/AIR9/wAhJCEAGAz3ALWytQB7eXsAMTApAOfn/wAhGPcA5+PnAEpB
        /wCtpv8AY2H3AHNt/wCclvcAQkFCADk0/wCEhoQAGBwYADk8OQDGw70AY2FaAKWinAAIBAAAEBAIAPfz
        /wD38+8A7+/vAM7L/wAxKPcASk1KAFJVUgClov8AWlX/AIyK9wCUkowAEBAQACkkIQDe1/8A1tf/AFJR
        /wC9vr0AY2H/AJSO/wBrZfcAraqlAEJBOQCEfXsAAAQAAAgIAAAICAgAEAwIABAUEAD/+/8AGBgQAPf3
        /wD38/cAISAhAO/r/wApKCEA7+vvAOfj/wApLCkAEAzvAOfn5wAxLCkA3tv/ACEc9wDe294AOTg5AM7P
        /wApJPcA1tPWADEs9wBCRUIAOTD/AL2+/wC9tv8AzsvOAEpJSgCtqv8AUlFSAFJN/wC9ur0AWlX3AGth
        /wC1trUAjIr/AHNx/wCEef8AlIr3AGttawCtrq0Ac3FzAKWmpQB7fXsAnJqcAJSOjACEgoQAjI6MAJSS
        lAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQFjDlIBAQEBAQEBAQEBAQEBAQEBAQEBAQE1I3AjIwEB
        AUWAhUgBAQEBAQEBAQEBAQEBAQEBAQEBYZCLiQqHAQEBY1gPORVhAQEBAQEBAQEBAQEBAQEBAQEiE10A
        AFABAQFhTg9vVCphAQEBAQEBAQEBAQEBAQEBAWGLHgAAYAEBAQEXc2s0fnxhAQEBAQEBAQEBAQEBAQEB
        IidEXENiAQEBAVMtNgcHKzdjAQEBAQEBAQEBAQEBAQEifR5cQ2ABAQEBAQxXVHdrdUxmAQEBAQEBAQEB
        AQEBASJKHlxDYgEBAQEBAWN4GUlvd4ZFAQEBAQEBAQEBAQEBIj8eXF0uAQEBAQEBAWFuOn4vPC1pAQEB
        AQEBAQEBAQFhZV1cHjsBAQEBAQEBAQFFeQYCHy0dAQEBAQEBAQEBAXBgXFxfQQEBAQEBAQEBAQEBDIMb
        dzhyAQEBAQEBAQEBFmIAAFCOAQEBAQEBAQEBAQEBY3hWPA0VYQEBAQEBAWEKUFwAYIgBAQEBAQEBAQEB
        AQEBYW4OgU18AQEBAQEBYVoeXEM+NQEBAQEBAQEBAQEBAQEBAUUFhC0sGAEBAQElIFxcHj8BAQEBAQEB
        AQEBAQEBAQEBAQFuJoUqaQEBAT1QAABEPWEBAQEBAQEBAQEBAQEBAQEBAQFFKiY3RQFkOx5cAD50AQEB
        AQEBAQEBAQEBAQEBAQEBAQFjUyoFM39iXFxeBCIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBM0gYCkNcAGAp
        AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQs+AFxcJGwBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFGfV5c
        AGBPAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAY1iXFxdOzUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQGC
        cUNcAD6KAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBCXteXAAeMSIBAQEBAQEBAQEBAQEBAQEBAQEBAQEB
        AUcnYFwAXgQjAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFHCiBcXAAhQAEBAQEBAQEBAQEBAQEBAQEBAQEB
        AQEBJTFnAAAAP4oBAQEBAQEBYQEBAQEBAQEBAQEBAQEBaIKHAAAAUHZCAQEBAQEBAQFkaGQiAQEBAQEB
        AQFhZHQ9CB4AXVA/gmEBAQEBAQEBASJVFANwAQEBAQFkI1kndmoAAABRCiVhAQEBAQEBAQEBASUWFjCP
        iYuLComHdhAAAF9aE4wjAQEBAQEBAQEBAQEBAQF6FHs7WjJtUVEIahI7Syh0AQEBAQEBAQEBAQEBAQEB
        AWFkERwWW4uLWxqOiHpHIgEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>